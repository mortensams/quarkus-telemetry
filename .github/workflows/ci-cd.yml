name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Make mvnw executable
      run: chmod +x ./mvnw

    - name: Check code style
      uses: axel-op/googlejavaformat-action@v3
      with:
        args: "--replace"
        skip-commit: true

    - name: Build and run tests with Maven
      run: ./mvnw -B verify
      
    - name: Generate JaCoCo Coverage Report
      run: ./mvnw jacoco:report
      
    - name: Check Coverage Thresholds
      run: |
        COVERAGE=$(./mvnw jacoco:report | grep -A 1 "Total.*class" | tail -n 1 | awk '{print $4}' | sed 's/%//')
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Code coverage is below 80%"
          exit 1
        fi

    # Build and push container
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=
          type=ref,event=branch
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL'

    # Integration testing of container
    - name: Run integration tests against container
      run: |
        docker run -d -p 8080:8080 --name telemetry-service ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        # Wait for container to be ready
        sleep 10
        # Run integration tests
        ./mvnw verify -Pintegration-tests